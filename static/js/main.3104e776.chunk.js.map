{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/Country/Country.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/Country/Country.module.css","assests/img/covid-logo.jpg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toLocaleDateString","url","fetchData","a","country","changeableUrl","axios","get","console","error","fetchDailyDate","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","title","text","Country","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","logo","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3104e776.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__16HQ8\",\"card\":\"Cards_card__3D73K\",\"infected\":\"Cards_infected__Nzki6\",\"recovered\":\"Cards_recovered__1yFr1\",\"deaths\":\"Cards_deaths__z63fo\"};","import React from \"react\";\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core'\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\"\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n\r\n    if (!confirmed) {\r\n        return \" Загрузка...\"\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify={`center`}>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color={`textSecondary`} gutterBottom>\r\n                            {/*Infected*/}\r\n                            Инфицировано\r\n                        </Typography>\r\n                        <Typography variant={`h5`}>\r\n                            <CountUp start={0}\r\n                                     end={confirmed.value}\r\n                                     duration={3.5}\r\n                                     separator='.'\r\n                            />\r\n                        </Typography>\r\n                        <Typography color={`textSecondary`}>\r\n                            {new Date(lastUpdate).toLocaleDateString()}\r\n                        </Typography>\r\n                        <Typography variant={`body2`}>\r\n                            {/*Number of active cases of COVID-19*/}\r\n                            Число зараженных COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color={`textSecondary`} gutterBottom>\r\n                            {/*Recovered*/}\r\n                            Выздоровело\r\n                        </Typography>\r\n                        <Typography variant={`h5`}>\r\n                            <CountUp start={0}\r\n                                     end={recovered.value}\r\n                                     duration={3.5}\r\n                                     separator='.'\r\n                            />\r\n                        </Typography>\r\n                        <Typography color={`textSecondary`}>\r\n                            {new Date(lastUpdate).toLocaleDateString()}\r\n                        </Typography>\r\n                        <Typography variant={`body2`}>\r\n                            {/*Number of recoveries from COVID-19*/}\r\n                            Число выздоровевших от COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color={`textSecondary`} gutterBottom>\r\n                            {/*Deaths*/}\r\n                            Погибло\r\n                        </Typography>\r\n                        <Typography variant={`h5`}>\r\n                            <CountUp start={0}\r\n                                     end={deaths.value}\r\n                                     duration={3.5}\r\n                                     separator='.'\r\n                            />\r\n                        </Typography>\r\n                        <Typography color={`textSecondary`}>\r\n                            {new Date(lastUpdate).toLocaleDateString()}\r\n                        </Typography>\r\n                        <Typography variant={`body2`}>\r\n                            {/*Number of deaths caused by COVID-19*/}\r\n                            Число летальных случаев от COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import axios from 'axios'\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const fetchData = async (country = null) => {\r\n    let changeableUrl = url\r\n\r\n    if (country && country !== 'global') {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl)\r\n        return {confirmed, recovered, deaths, lastUpdate}\r\n    } catch (error) {\r\n        console.error('Something wrong in the fetch data from https://covid19.mathdro.id/api')\r\n    }\r\n}\r\n\r\nexport const fetchDailyDate = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`)\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        return modifiedData\r\n    } catch (error) {\r\n        console.error('Something wrong in the fetch data from https://covid19.mathdro.id/api/daily')\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`)\r\n\r\n        return countries.map((country) => country.name)\r\n\r\n    } catch (error) {\r\n        console.error('Something wrong in the fetch data from https://covid19.mathdro.id/api/daily')\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {fetchDailyDate} from \"../../api\";\r\nimport {Line, Bar} from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\"\r\n\r\nconst Chart = ({data: { confirmed, recovered, deaths }, country}) => {\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyDate())\r\n        }\r\n        fetchAPI()\r\n    }, [setDailyData])\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n            <Line\r\n                data={{\r\n                    labels: dailyData.map(({date}) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({confirmed}) => confirmed),\r\n                        // label: \"Infected\",\r\n                        label: \"Зараженных\",\r\n                        borderColor: \"#3333ff\",\r\n                        backgroundColor: 'rgba(0, 0, 255, 0.3)',\r\n                        fill: true,\r\n                    }, {\r\n                        data: dailyData.map(({deaths}) => deaths),\r\n                        // label: \"Deaths\",\r\n                        label: \"Летальных\",\r\n                        borderColor: \"#ff1c1c\",\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.3)',\r\n                        fill: true,\r\n                    }]\r\n                }}\r\n            /> : \"Loading...\"\r\n    )\r\n    const barChart = (\r\n        confirmed\r\n            ? (<Bar\r\n                data={{\r\n                    labels: ['Зараженных', 'Выздоровевших', 'Погибших'],\r\n                    datasets: [{\r\n                        label: \"Людей\",\r\n                        backgroundColor: [\r\n                            \"rgba(255,0,255,.6)\",\r\n                            \"rgba(0,255,0,.6)\",\r\n                            \"rgba(255,0,0,.6)\"\r\n                        ],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display: false},\r\n                    title: {display: true, text:`Число случаев в ${country}`}\r\n                }}\r\n            />)\r\n            : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart","import React, {useEffect, useState} from \"react\";\r\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\r\nimport {fetchCountries} from \"../../api\";\r\n\r\nimport styles from \"./Country.module.css\"\r\n\r\nconst Country = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n        fetchAPI()\r\n    }, [setFetchedCountries])\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue={``} onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value={`global`}>Общее число случаев</option>\r\n                {fetchedCountries.map((country, i) => <option\r\n                    value={country}\r\n                    key={i}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default Country","import React from 'react';\nimport { Cards, Chart, Country } from './components';\nimport {fetchData} from \"./api\";\nimport logo from '../src/assests/img/covid-logo.jpg'\n\nimport styles from './App.module.css';\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: ''\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData()\n        this.setState({data: fetchedData})\n    }\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country)\n        this.setState({data: fetchedData, country})\n    }\n\n    render() {\n        const { data, country }  = this.state\n    return (\n        <div className={styles.container}>\n            <img src={logo} className={`${styles.logo}`} alt=\"COVID-19\" />\n            <Cards data={data}/>\n            <Country handleCountryChange={this.handleCountryChange} />\n            <Chart data={data} country={country}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2NaEE\",\"container\":\"App_container__91EeJ\",\"logo\":\"App_logo__14gMM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3LaEZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__LZBhU\"};","module.exports = __webpack_public_path__ + \"static/media/covid-logo.7fcff41e.jpg\";"],"sourceRoot":""}